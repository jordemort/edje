.TH "Edje_Edit.h" 3 "25 Sep 2008" "Edje" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Edje_Edit.h \- 
.SH "Detailed Description"
.PP 
Functions to deal with edje internal object. 

Don't use in standard situations. The use of any of the edje_edit_* functions can break your theme ability, remember that the program must be separated from the interface!
.PP
The API can be used to query or set every part of an edje object in real time. You can manage every aspect of parts, part states, programs, script and whatever is contained in the edje file. For a reference of what all parameter means look at the complete \fBEdje Data Collection reference\fP.
.PP
All the functions that deals with part states include the state value inside the returned strings (ex: 'defaut 0.00'). For this reason there aren't functions to set/get a state value, you have to pass the value inside the name string (always in the form 'state x.xx').
.PP
Don't forget to free all the strings and the lists returned by any edje_edit_*() functions using \fBedje_edit_string_free()\fP and \fBedje_edit_string_list_free()\fP when you don't need anymore.
.PP
Example: print all the part in a loaded edje_object 
.PP
.nf
  Evas_List *parts, *l;

  parts = edje_edit_parts_list_get(edje_object);
  while(l = parts; l; l = l->next)
  {
     printf('Part: %s\n', (char*)l->data);
  }
  edje_edit_string_list_free(parts);

.fi
.PP
.PP
Example: Change the color of a rect inside an edje file 
.PP
.nf
 Evas_Object *edje;

 edje = edje_object_add(evas);
 edje_object_file_set(edje,'edj/file/name', 'group to load');
 edje_edit_state_color_set(edje, 'MyRectName', 'default 0.00', 255, 255, 0, 255);
 edje_edit_save(edje);

.fi
.PP
 
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.PP
.RI "\fBGeneral API\fP"
.br
General functions that don't fit in other cateories. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI void \fBedje_edit_string_list_free\fP (Evas_List *lst)"
.br
.RI "\fIFree a generic Evas_List of (char *) allocated by an edje_edit_*_get() function. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_string_free\fP (const char *str)"
.br
.RI "\fIFree a generic string (char *) allocated by an edje_edit_*_get() function. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_save\fP (Evas_Object *obj)"
.br
.RI "\fISave the modified edje object back to his file. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_print_internal_status\fP (Evas_Object *obj)"
.br
.RI "\fIPrint on standard output many information about the internal status of the edje object. \fP"
.in -1c
.in -1c
.PP
.RI "\fBGroups API\fP"
.br
Functions to deal with groups property (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_group_add\fP (Evas_Object *obj, const char *name)"
.br
.RI "\fICreate a new empty group in the given edje. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_group_del\fP (Evas_Object *obj)"
.br
.RI "\fIDelete the current group from the given edje. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_group_exist\fP (Evas_Object *obj, const char *group)"
.br
.RI "\fICheck if a group with the given name exist in the edje. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_group_name_set\fP (Evas_Object *obj, const char *new_name)"
.br
.RI "\fISet a new name for the current open group. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_group_min_w_get\fP (Evas_Object *obj)"
.br
.RI "\fIGet the group min width. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_group_min_w_set\fP (Evas_Object *obj, int w)"
.br
.RI "\fISet the group min width. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_group_min_h_get\fP (Evas_Object *obj)"
.br
.RI "\fIGet the group min height. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_group_min_h_set\fP (Evas_Object *obj, int h)"
.br
.RI "\fISet the group min height. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_group_max_w_get\fP (Evas_Object *obj)"
.br
.RI "\fIGet the group max width. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_group_max_w_set\fP (Evas_Object *obj, int w)"
.br
.RI "\fISet the group max width. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_group_max_h_get\fP (Evas_Object *obj)"
.br
.RI "\fIGet the group max height. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_group_max_h_set\fP (Evas_Object *obj, int h)"
.br
.RI "\fISet the group max height. \fP"
.in -1c
.in -1c
.PP
.RI "\fBData API\fP"
.br
Functions to deal with data embedded in the edje (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_data_list_get\fP (Evas_Object *obj)"
.br
.RI "\fIRetrieves a list with the item names inside the data block. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_data_add\fP (Evas_Object *obj, const char *itemname, const char *value)"
.br
.RI "\fICreate a new data object in the given edje If another data with the same name exists nothing is created and FALSE is returned. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_data_del\fP (Evas_Object *obj, const char *itemname)"
.br
.RI "\fIDelete the given data object from edje. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_data_value_get\fP (Evas_Object *obj, char *itemname)"
.br
.RI "\fIGet the data associated with the given itemname. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_data_value_set\fP (Evas_Object *obj, const char *itemname, const char *value)"
.br
.RI "\fISet the data associated with the given itemname. \fP"
.in -1c
.in -1c
.PP
.RI "\fBParts API\fP"
.br
Functions to deal with part objects (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_parts_list_get\fP (Evas_Object *obj)"
.br
.RI "\fIGet the list of all the parts in the given edje object. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_add\fP (Evas_Object *obj, const char *name, unsigned char type)"
.br
.RI "\fICreate a new part in the given edje If another part with the same name just exists nothing is created and FALSE is returned. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_del\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIDelete the given part from the edje All the reference to this part will be zeroed. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_exist\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fICheck if a part with the given name exist in the edje object. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_restack_below\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIMove the given part below the previous one. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_restack_above\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIMove the given part above the next one. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_name_set\fP (Evas_Object *obj, const char *part, const char *new_name)"
.br
.RI "\fISet a new name for part. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_type_get\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIGet the type of a part. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_part_clip_to_get\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIGet the clip_to part. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_clip_to_set\fP (Evas_Object *obj, const char *part, const char *clip_to)"
.br
.RI "\fISet a part to clip part to. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_part_source_get\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIGet the source of part. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_source_set\fP (Evas_Object *obj, const char *part, const char *source)"
.br
.RI "\fISet the source of part. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_effect_get\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIGet the effect for a given part. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_part_effect_set\fP (Evas_Object *obj, const char *part, unsigned char effect)"
.br
.RI "\fISet the effect for a given part. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_part_selected_state_get\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIGet the current selected state in part. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_selected_state_set\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fISet the current state in part. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_mouse_events_get\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIGet mouse_events for part. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_part_mouse_events_set\fP (Evas_Object *obj, const char *part, unsigned char mouse_events)"
.br
.RI "\fISet mouse_events for part. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_part_repeat_events_get\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIGet repeat_events for part. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_part_repeat_events_set\fP (Evas_Object *obj, const char *part, unsigned char repeat_events)"
.br
.RI "\fISet repeat_events for part. \fP"
.ti -1c
.RI "EAPI Evas_Event_Flags \fBedje_edit_part_ignore_flags_get\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIGet ignore_flags for part. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_part_ignore_flags_set\fP (Evas_Object *obj, const char *part, Evas_Event_Flags ignore_flags)"
.br
.RI "\fISet repeat_events for part. \fP"
.in -1c
.in -1c
.PP
.RI "\fBStates API\fP"
.br
Functions to deal with part states (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_part_states_list_get\fP (Evas_Object *obj, const char *part)"
.br
.RI "\fIGet the list of all the states in the given part. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_name_set\fP (Evas_Object *obj, const char *part, const char *state, const char *new_name)"
.br
.RI "\fISet a new name for the given state in the given part. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_add\fP (Evas_Object *obj, const char *part, const char *name)"
.br
.RI "\fICreate a new state to the give part. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_del\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIDelete the given part state from the edje. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_exist\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fICheck if a part state with the given name exist. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_rel1_relative_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the rel1 relative x value of state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_rel1_relative_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the rel1 relative y value of state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_rel2_relative_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the rel2 relative x value of state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_rel2_relative_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the rel2 relative y value of state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel1_relative_x_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fISet the rel1 relative x value of state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel1_relative_y_set\fP (Evas_Object *obj, const char *part, const char *state, double y)"
.br
.RI "\fISet the rel1 relative y value of state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel2_relative_x_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fISet the rel2 relative x value of state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel2_relative_y_set\fP (Evas_Object *obj, const char *part, const char *state, double y)"
.br
.RI "\fISet the rel2 relative y value of state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_rel1_offset_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the rel1 offset x value of state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_rel1_offset_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the rel1 offset y value of state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_rel2_offset_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the rel2 offset x value of state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_rel2_offset_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the rel2 offset y value of state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel1_offset_x_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fISet the rel1 offset x value of state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel1_offset_y_set\fP (Evas_Object *obj, const char *part, const char *state, double y)"
.br
.RI "\fIGet the rel1 offset y value of state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel2_offset_x_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fIGet the rel2 offset x value of state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel2_offset_y_set\fP (Evas_Object *obj, const char *part, const char *state, double y)"
.br
.RI "\fIGet the rel2 offset y value of state. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_state_rel1_to_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the part name rel1x is relative to. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_state_rel1_to_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the part name rel1y is relative to. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_state_rel2_to_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the part name rel2x is relative to. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_state_rel2_to_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the part name rel2y is relative to. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel1_to_x_set\fP (Evas_Object *obj, const char *part, const char *state, const char *rel_to)"
.br
.RI "\fISet the part rel1x is relative to. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel1_to_y_set\fP (Evas_Object *obj, const char *part, const char *state, const char *rel_to)"
.br
.RI "\fISet the part rel1y is relative to. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel2_to_x_set\fP (Evas_Object *obj, const char *part, const char *state, const char *rel_to)"
.br
.RI "\fISet the part rel2x is relative to. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_rel2_to_y_set\fP (Evas_Object *obj, const char *part, const char *state, const char *rel_to)"
.br
.RI "\fISet the part rel2y is relative to. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_color_get\fP (Evas_Object *obj, const char *part, const char *state, int *r, int *g, int *b, int *a)"
.br
.RI "\fIGet the color of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_color2_get\fP (Evas_Object *obj, const char *part, const char *state, int *r, int *g, int *b, int *a)"
.br
.RI "\fIGet the color2 of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_color3_get\fP (Evas_Object *obj, const char *part, const char *state, int *r, int *g, int *b, int *a)"
.br
.RI "\fIGet the color3 of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_color_set\fP (Evas_Object *obj, const char *part, const char *state, int r, int g, int b, int a)"
.br
.RI "\fISet the color of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_color2_set\fP (Evas_Object *obj, const char *part, const char *state, int r, int g, int b, int a)"
.br
.RI "\fISet the color2 of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_color3_set\fP (Evas_Object *obj, const char *part, const char *state, int r, int g, int b, int a)"
.br
.RI "\fISet the color3 of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_align_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the align_x value of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_align_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the align_y value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_align_x_set\fP (Evas_Object *obj, const char *part, const char *state, double align)"
.br
.RI "\fISet the align_x value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_align_y_set\fP (Evas_Object *obj, const char *part, const char *state, double align)"
.br
.RI "\fISet the align_y value of a part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_min_w_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the min_w value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_min_w_set\fP (Evas_Object *obj, const char *part, const char *state, int min_w)"
.br
.RI "\fISet the min_w value of a part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_min_h_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the min_h value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_min_h_set\fP (Evas_Object *obj, const char *part, const char *state, int min_h)"
.br
.RI "\fISet the min_h value of a part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_max_w_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the max_w value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_max_w_set\fP (Evas_Object *obj, const char *part, const char *state, int max_w)"
.br
.RI "\fISet the max_w value of a part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_max_h_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the max_h value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_max_h_set\fP (Evas_Object *obj, const char *part, const char *state, int max_h)"
.br
.RI "\fISet the max_h value of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_aspect_min_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the minimum aspect value of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_aspect_max_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the maximum aspect value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_aspect_min_set\fP (Evas_Object *obj, const char *part, const char *state, double aspect)"
.br
.RI "\fISet the minimum aspect value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_aspect_max_set\fP (Evas_Object *obj, const char *part, const char *state, double aspect)"
.br
.RI "\fISet the maximum aspect value of a part state. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_aspect_pref_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the aspect preference value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_aspect_pref_set\fP (Evas_Object *obj, const char *part, const char *state, unsigned char pref)"
.br
.RI "\fISet the aspect preference value of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_fill_origin_relative_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the fill origin relative x value of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_fill_origin_relative_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the fill origin relative y value of a part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_fill_origin_offset_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the fill origin offset x value of a part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_fill_origin_offset_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the fill origin offset y value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_fill_origin_relative_x_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fISet the fill origin relative x value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_fill_origin_relative_y_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fISet the fill origin relative y value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_fill_origin_offset_x_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fISet the fill origin offset x value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_fill_origin_offset_y_set\fP (Evas_Object *obj, const char *part, const char *state, double y)"
.br
.RI "\fISet the fill origin offset x value of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_fill_size_relative_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the fill size relative x value of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_fill_size_relative_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the fill size relative y value of a part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_fill_size_offset_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the fill size offset x value of a part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_fill_size_offset_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the fill size offset y value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_fill_size_relative_x_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fISet the fill size relative x value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_fill_size_relative_y_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fISet the fill size relative y value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_fill_size_offset_x_set\fP (Evas_Object *obj, const char *part, const char *state, double x)"
.br
.RI "\fISet the fill size offset x value of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_fill_size_offset_y_set\fP (Evas_Object *obj, const char *part, const char *state, double y)"
.br
.RI "\fISet the fill size offset x value of a part state. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_visible_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the visibility of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_visible_set\fP (Evas_Object *obj, const char *part, const char *state, unsigned char visible)"
.br
.RI "\fISet the visibility of a part state. \fP"
.in -1c
.in -1c
.PP
.RI "\fBText API\fP"
.br
Functions to deal with text objects (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI const char * \fBedje_edit_state_text_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the text of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_text_set\fP (Evas_Object *obj, const char *part, const char *state, const char *text)"
.br
.RI "\fISet the text of a part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_text_size_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the text size of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_text_size_set\fP (Evas_Object *obj, const char *part, const char *state, int size)"
.br
.RI "\fISet the text size of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_text_align_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the text horizontal align of a part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_text_align_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the text vertical align of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_text_align_x_set\fP (Evas_Object *obj, const char *part, const char *state, double align)"
.br
.RI "\fISet the text horizontal align of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_text_align_y_set\fP (Evas_Object *obj, const char *part, const char *state, double align)"
.br
.RI "\fISet the text vertical align of a part state. \fP"
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_fonts_list_get\fP (Evas_Object *obj)"
.br
.RI "\fIGet the list of all the fonts in the given edje. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_font_add\fP (Evas_Object *obj, const char *path)"
.br
.RI "\fIAdd a new ttf font to the edje file. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_state_font_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet font name for a given part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_font_set\fP (Evas_Object *obj, const char *part, const char *state, const char *font)"
.br
.RI "\fISet font name for a given part state. \fP"
.in -1c
.in -1c
.PP
.RI "\fBImages API\fP"
.br
Functions to deal with image objects (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_images_list_get\fP (Evas_Object *obj)"
.br
.RI "\fIGet the list of all the images in the given edje. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_image_add\fP (Evas_Object *obj, const char *path)"
.br
.RI "\fIAdd an new image to the image collection. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_state_image_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet normal image name for a given part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_image_set\fP (Evas_Object *obj, const char *part, const char *state, const char *image)"
.br
.RI "\fISet normal image for a given part state. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_image_id_get\fP (Evas_Object *obj, const char *image_name)"
.br
.RI "\fIGet image id for a given image name. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_image_compression_type_get\fP (Evas_Object *obj, const char *image)"
.br
.RI "\fIGet compression type for the given image. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_image_compression_rate_get\fP (Evas_Object *obj, const char *image)"
.br
.RI "\fIGet compression rate for the given image. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_image_border_get\fP (Evas_Object *obj, const char *part, const char *state, int *l, int *r, int *t, int *b)"
.br
.RI "\fIGet the image border of a part state. \fP"
.ti -1c
.RI "EAPI void \fBedje_edit_state_image_border_set\fP (Evas_Object *obj, const char *part, const char *state, int l, int r, int t, int b)"
.br
.RI "\fISet the image border of a part state. \fP"
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_state_tweens_list_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the list of all the tweens images in the given part state. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_tween_add\fP (Evas_Object *obj, const char *part, const char *state, const char *tween)"
.br
.RI "\fIAdd a new tween frame to the given part state The tween param must be the name of an existing image. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_tween_del\fP (Evas_Object *obj, const char *part, const char *state, const char *tween)"
.br
.RI "\fIRemove the first tween with the given name. \fP"
.in -1c
.in -1c
.PP
.RI "\fBSpectrum API\fP"
.br
Functions to manage spectrum (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_spectrum_list_get\fP (Evas_Object *obj)"
.br
.RI "\fIGet the list of all the spectrum in the given edje object. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_spectra_add\fP (Evas_Object *obj, const char *name)"
.br
.RI "\fIAdd a new spectra in the given edje object. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_spectra_del\fP (Evas_Object *obj, const char *spectra)"
.br
.RI "\fIDelete the given spectra from the edje object. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_spectra_name_set\fP (Evas_Object *obj, const char *spectra, const char *name)"
.br
.RI "\fIChange the name of the given spectra. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_spectra_stop_num_get\fP (Evas_Object *obj, const char *spectra)"
.br
.RI "\fIGet the number of stops in the given spectra. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_spectra_stop_num_set\fP (Evas_Object *obj, const char *spectra, int num)"
.br
.RI "\fISet the number of stops in the given spectra. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_spectra_stop_color_get\fP (Evas_Object *obj, const char *spectra, int stop_number, int *r, int *g, int *b, int *a, int *d)"
.br
.RI "\fIGet the colors of the given stop. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_spectra_stop_color_set\fP (Evas_Object *obj, const char *spectra, int stop_number, int r, int g, int b, int a, int d)"
.br
.RI "\fISet the colors of the given stop. \fP"
.in -1c
.in -1c
.PP
.RI "\fBGradient API\fP"
.br
Functions to deal with gradient objects (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI const char * \fBedje_edit_state_gradient_type_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the type of gradient. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_type_set\fP (Evas_Object *obj, const char *part, const char *state, const char *type)"
.br
.RI "\fISet the type of gradient. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_use_fill_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet if the current gradient use the fill properties or the gradient_rel as params. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_state_gradient_spectra_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the spectra used by part state. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_spectra_set\fP (Evas_Object *obj, const char *part, const char *state, const char *spectra)"
.br
.RI "\fISet the spectra used by part state. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_gradient_rel1_relative_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the gradien rel1 relative x value. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_gradient_rel1_relative_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the gradien rel1 relative y value. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_gradient_rel2_relative_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the gradien rel2 relative x value. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_state_gradient_rel2_relative_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the gradien rel2 relative y value. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_rel1_relative_x_set\fP (Evas_Object *obj, const char *part, const char *state, double val)"
.br
.RI "\fISet the gradien rel1 relative x value. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_rel1_relative_y_set\fP (Evas_Object *obj, const char *part, const char *state, double val)"
.br
.RI "\fISet the gradien rel1 relative y value. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_rel2_relative_x_set\fP (Evas_Object *obj, const char *part, const char *state, double val)"
.br
.RI "\fISet the gradien rel2 relative x value. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_rel2_relative_y_set\fP (Evas_Object *obj, const char *part, const char *state, double val)"
.br
.RI "\fISet the gradien rel2 relative y value. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_gradient_rel1_offset_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the gradien rel1 offset x value. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_gradient_rel1_offset_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the gradien rel1 offset y value. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_gradient_rel2_offset_x_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the gradien rel2 offset x value. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_state_gradient_rel2_offset_y_get\fP (Evas_Object *obj, const char *part, const char *state)"
.br
.RI "\fIGet the gradien rel2 offset y value. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_rel1_offset_x_set\fP (Evas_Object *obj, const char *part, const char *state, int val)"
.br
.RI "\fISet the gradien rel1 offset x value. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_rel1_offset_y_set\fP (Evas_Object *obj, const char *part, const char *state, int val)"
.br
.RI "\fISet the gradien rel1 offset y value. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_rel2_offset_x_set\fP (Evas_Object *obj, const char *part, const char *state, int val)"
.br
.RI "\fISet the gradien rel2 offset x value. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_state_gradient_rel2_offset_y_set\fP (Evas_Object *obj, const char *part, const char *state, int val)"
.br
.RI "\fISet the gradien rel2 offset y value. \fP"
.in -1c
.in -1c
.PP
.RI "\fBPrograms API\fP"
.br
Functions to deal with programs (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_programs_list_get\fP (Evas_Object *obj)"
.br
.RI "\fIGet the list of all the programs in the given edje object. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_add\fP (Evas_Object *obj, const char *name)"
.br
.RI "\fIAdd a new program to the edje file If a program with the same name just exist the function will fail. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_del\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIRemove the given program from the edje file. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_exist\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fICheck if a program with the given name exist in the edje object. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_run\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIRun the given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_name_set\fP (Evas_Object *obj, const char *prog, const char *new_name)"
.br
.RI "\fISet a new name for the given program. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_program_source_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet source of a given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_source_set\fP (Evas_Object *obj, const char *prog, const char *source)"
.br
.RI "\fISet source of the given program. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_program_signal_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet signal of a given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_signal_set\fP (Evas_Object *obj, const char *prog, const char *signal)"
.br
.RI "\fISet signal of the given program. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_program_in_from_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet in.from of a given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_in_from_set\fP (Evas_Object *obj, const char *prog, double seconds)"
.br
.RI "\fISet in.from of a given program. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_program_in_range_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet in.range of a given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_in_range_set\fP (Evas_Object *obj, const char *prog, double seconds)"
.br
.RI "\fISet in.range of a given program. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_program_action_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet the action of a given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_action_set\fP (Evas_Object *obj, const char *prog, int action)"
.br
.RI "\fISet the action of a given program. \fP"
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_program_targets_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet the list of the targets for the given program Return a list of target name Use \fBedje_edit_string_list_free()\fP when you don't need it anymore. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_target_add\fP (Evas_Object *obj, const char *prog, const char *target)"
.br
.RI "\fIAdd a new target name to the list of 'targets' in the given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_targets_clear\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIClear the 'targets' list of the given program. \fP"
.ti -1c
.RI "EAPI Evas_List * \fBedje_edit_program_afters_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet the list of action that will be run after the give program Return a list of program name. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_after_add\fP (Evas_Object *obj, const char *prog, const char *after)"
.br
.RI "\fIAdd a new program name to the list of 'afters' in the given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_afters_clear\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIClear the 'afters' list of the given program. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_program_state_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet the state for the given program In a STATE_SET action this is the name of state to set. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_state_set\fP (Evas_Object *obj, const char *prog, const char *state)"
.br
.RI "\fISet the state for the given program In a STATE_SET action this is the name of state to set. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_program_value_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet the value of state for the given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_value_set\fP (Evas_Object *obj, const char *prog, double value)"
.br
.RI "\fISet the value of state for the given program. \fP"
.ti -1c
.RI "EAPI const char * \fBedje_edit_program_state2_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet the state2 for the given program In a STATE_SET action is not used In a SIGNAL_EMIT action is the source of the emitted signal. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_state2_set\fP (Evas_Object *obj, const char *prog, const char *state2)"
.br
.RI "\fISet the state2 for the given program In a STATE_SET action is not used In a SIGNAL_EMIT action is the source of the emitted signal. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_program_value2_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet the value of state2 for the given program. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_value2_set\fP (Evas_Object *obj, const char *prog, double value)"
.br
.RI "\fISet the value2 of state for the given program. \fP"
.ti -1c
.RI "EAPI int \fBedje_edit_program_transition_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet the type of transition to use when apply animations. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_transition_set\fP (Evas_Object *obj, const char *prog, int transition)"
.br
.RI "\fISet the type of transition to use when apply animations. \fP"
.ti -1c
.RI "EAPI double \fBedje_edit_program_transition_time_get\fP (Evas_Object *obj, const char *prog)"
.br
.RI "\fIGet the duration of the transition in seconds. \fP"
.ti -1c
.RI "EAPI unsigned char \fBedje_edit_program_transition_time_set\fP (Evas_Object *obj, const char *prog, double seconds)"
.br
.RI "\fISet the duration of the transition in seconds. \fP"
.in -1c
.in -1c
.PP
.RI "\fBScripts API\fP"
.br
Functions to deal with embryo scripts (see \fBEdje Data Collection reference\fP). 
.PP
.in +1c
.in +1c
.ti -1c
.RI "EAPI const char * \fBedje_edit_script_get\fP (Evas_Object *obj)"
.br
.in -1c
.in -1c
.SH "Function Documentation"
.PP 
.SS "EAPI unsigned char edje_edit_data_add (Evas_Object * obj, const char * itemname, const char * value)"
.PP
Create a new data object in the given edje If another data with the same name exists nothing is created and FALSE is returned. 
.PP
\fBReturns:\fP
.RS 4
TRUE on success 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIitemname\fP\fP
The name for the new data 
.TP
\fB\fIvalue\fP\fP
The value for the new data 
.SS "EAPI unsigned char edje_edit_data_del (Evas_Object * obj, const char * itemname)"
.PP
Delete the given data object from edje. 
.PP
\fBReturns:\fP
.RS 4
TRUE on success 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIitemname\fP\fP
The name of the data to remove 
.SS "EAPI Evas_List* edje_edit_data_list_get (Evas_Object * obj)"
.PP
Retrieves a list with the item names inside the data block. 
.PP
\fBReturns:\fP
.RS 4
An Evas_List* of string (char *)containing all the data names. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI const char* edje_edit_data_value_get (Evas_Object * obj, char * itemname)"
.PP
Get the data associated with the given itemname. 
.PP
\fBReturns:\fP
.RS 4
The data value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIitemname\fP\fP
The name of the data item 
.SS "EAPI unsigned char edje_edit_data_value_set (Evas_Object * obj, const char * itemname, const char * value)"
.PP
Set the data associated with the given itemname. 
.PP
\fBReturns:\fP
.RS 4
TRUE on success 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIitemname\fP\fP
The name of the data item 
.TP
\fB\fIvalue\fP\fP
The new value to set 
.SS "EAPI unsigned char edje_edit_font_add (Evas_Object * obj, const char * path)"
.PP
Add a new ttf font to the edje file. 
.PP
The newly created font will be available to all the groups in the edje, not only the current one. If font can't be load FALSE is returned.
.PP
\fBReturns:\fP
.RS 4
TRUE on success or FALSE on failure 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpath\fP\fP
The file path to load the ttf font from 
.SS "EAPI Evas_List* edje_edit_fonts_list_get (Evas_Object * obj)"
.PP
Get the list of all the fonts in the given edje. 
.PP
Use \fBedje_edit_string_list_free()\fP when you don't need the list anymore.
.PP
\fBReturns:\fP
.RS 4
An Evas_List* of string (char *)containing all the fonts names found in the edje file. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI unsigned char edje_edit_group_add (Evas_Object * obj, const char * name)"
.PP
Create a new empty group in the given edje. 
.PP
If a group with the same name exist none is created.
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 on failure 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIname\fP\fP
The name for the new empty group 
.SS "EAPI unsigned char edje_edit_group_del (Evas_Object * obj)"
.PP
Delete the current group from the given edje. 
.PP
You can only delete the currently loaded group. All the parts and the programs inside the group will be deleted as well, but not image or font embedded in the edje.
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 on failure 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI unsigned char edje_edit_group_exist (Evas_Object * obj, const char * group)"
.PP
Check if a group with the given name exist in the edje. 
.PP
< 1 if the group exist, 0 otherwise. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIgroup\fP\fP
The name of the group 
.SS "EAPI int edje_edit_group_max_h_get (Evas_Object * obj)"
.PP
Get the group max height. 
.PP
\fBReturns:\fP
.RS 4
The maxh value or -1 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI void edje_edit_group_max_h_set (Evas_Object * obj, int h)"
.PP
Set the group max height. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIh\fP\fP
The new group maximum height in pixel 
.SS "EAPI int edje_edit_group_max_w_get (Evas_Object * obj)"
.PP
Get the group max width. 
.PP
\fBReturns:\fP
.RS 4
The maxw value or -1 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI void edje_edit_group_max_w_set (Evas_Object * obj, int w)"
.PP
Set the group max width. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIw\fP\fP
The new group maximum width in pixel 
.SS "EAPI int edje_edit_group_min_h_get (Evas_Object * obj)"
.PP
Get the group min height. 
.PP
\fBReturns:\fP
.RS 4
The minh value or -1 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI void edje_edit_group_min_h_set (Evas_Object * obj, int h)"
.PP
Set the group min height. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIh\fP\fP
The new group minimum height in pixel 
.SS "EAPI int edje_edit_group_min_w_get (Evas_Object * obj)"
.PP
Get the group min width. 
.PP
\fBReturns:\fP
.RS 4
The minw value or -1 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI void edje_edit_group_min_w_set (Evas_Object * obj, int w)"
.PP
Set the group min width. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIw\fP\fP
The new group minimum width in pixel 
.SS "EAPI unsigned char edje_edit_group_name_set (Evas_Object * obj, const char * new_name)"
.PP
Set a new name for the current open group. 
.PP
You can only rename a group that is currently loaded Note that the relative getter function don't exist as it don't make sense ;)
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 on failure 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fInew_name\fP\fP
The new name for the group 
.SS "EAPI unsigned char edje_edit_image_add (Evas_Object * obj, const char * path)"
.PP
Add an new image to the image collection. 
.PP
This function add the given image inside the edje. Don't add a new image part but only put the image inside the edje file. It actually write directly to the file so you don't have to save (and you can't undo!). After you have to create a new image_part that use this image. Note that all the parts in the edje share the same image collection, thus you can/must use the same image for different part.
.PP
The format of the image files that can be loaded depend on the evas engine on your system
.PP
\fBReturns:\fP
.RS 4
TRUE on success or FALSE on failure 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpath\fP\fP
The name of the image file to include in the edje 
.SS "EAPI int edje_edit_image_compression_rate_get (Evas_Object * obj, const char * image)"
.PP
Get compression rate for the given image. 
.PP
\fBReturns:\fP
.RS 4
the compression rate if the image is EDJE_EDIT_IMAGE_COMP_LOSSY. Or < 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIimage\fP\fP
The name of the image 
.SS "EAPI int edje_edit_image_compression_type_get (Evas_Object * obj, const char * image)"
.PP
Get compression type for the given image. 
.PP
\fBReturns:\fP
.RS 4
One of EDJE_EDIT_IMAGE_COMP_RAW, EDJE_EDIT_IMAGE_COMP_USER, EDJE_EDIT_IMAGE_COMP_COMP or EDJE_EDIT_IMAGE_COMP_LOSSY 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIimage\fP\fP
The name of the image 
.SS "EAPI int edje_edit_image_id_get (Evas_Object * obj, const char * image_name)"
.PP
Get image id for a given image name. 
.PP
Could be usefull to directly load the image from the eet file. < The ID of the givan image name 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI Evas_List* edje_edit_images_list_get (Evas_Object * obj)"
.PP
Get the list of all the images in the given edje. 
.PP
Use \fBedje_edit_string_list_free()\fP when you don't need the list anymore.
.PP
\fBReturns:\fP
.RS 4
An Evas_List* of string (char *)containing all the images names found in the edje file. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI unsigned char edje_edit_part_add (Evas_Object * obj, const char * name, unsigned char type)"
.PP
Create a new part in the given edje If another part with the same name just exists nothing is created and FALSE is returned. 
.PP
Note that this function also create a default description for the part.
.PP
\fBReturns:\fP
.RS 4
TRUE on success, FALSE if the part can't be created 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIname\fP\fP
The name for the new part 
.TP
\fB\fItype\fP\fP
The type of the part to create (One of: EDJE_PART_TYPE_NONE, EDJE_PART_TYPE_RECTANGLE, EDJE_PART_TYPE_TEXT,EDJE_PART_TYPE_IMAGE, EDJE_PART_TYPE_SWALLOW, EDJE_PART_TYPE_TEXTBLOCK,EDJE_PART_TYPE_GRADIENT or EDJE_PART_TYPE_GROUP) 
.SS "EAPI const char* edje_edit_part_clip_to_get (Evas_Object * obj, const char * part)"
.PP
Get the clip_to part. 
.PP
NULL is returned on errors and if the part don't have a clip.
.PP
\fBReturns:\fP
.RS 4
The name of the part to clip part to. Use \fBedje_edit_string_free()\fP when you don't need it anymore. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI unsigned char edje_edit_part_clip_to_set (Evas_Object * obj, const char * part, const char * clip_to)"
.PP
Set a part to clip part to. 
.PP
If clip_to is NULL then the clipping value will be cancelled (unset clipping)
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIclip_to\fP\fP
The name of the part to clip part to. 
.SS "EAPI unsigned char edje_edit_part_del (Evas_Object * obj, const char * part)"
.PP
Delete the given part from the edje All the reference to this part will be zeroed. 
.PP
A group must have at least one part, so it's not possible to remove the last remaining part.
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 if the part can't be removed 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part to remove 
.SS "EAPI unsigned char edje_edit_part_effect_get (Evas_Object * obj, const char * part)"
.PP
Get the effect for a given part. 
.PP
\fBReturns:\fP
.RS 4
One of: EDJE_TEXT_EFFECT_NONE, _PLAIN, _OUTLINE, _SOFT_OUTLINE, _SHADOW, _SOFT_SHADOW, _OUTLINE_SHADOW, _OUTLINE_SOFT_SHADOW, _FAR_SHADOW, _FAR_SOFT_SHADOW, _GLOW. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI void edje_edit_part_effect_set (Evas_Object * obj, const char * part, unsigned char effect)"
.PP
Set the effect for a given part. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIeffect\fP\fP
The effect to set. See \fBedje_edit_part_effect_get()\fP for possible value 
.SS "EAPI unsigned char edje_edit_part_exist (Evas_Object * obj, const char * part)"
.PP
Check if a part with the given name exist in the edje object. 
.PP
< 1 if the part exist, 0 otherwise. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI Evas_Event_Flags edje_edit_part_ignore_flags_get (Evas_Object * obj, const char * part)"
.PP
Get ignore_flags for part. 
.PP
\fBReturns:\fP
.RS 4
event flags ignored 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI void edje_edit_part_ignore_flags_set (Evas_Object * obj, const char * part, Evas_Event_Flags ignore_flags)"
.PP
Set repeat_events for part. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIignore_flags\fP\fP
event flags to be ignored 
.SS "EAPI unsigned char edje_edit_part_mouse_events_get (Evas_Object * obj, const char * part)"
.PP
Get mouse_events for part. 
.PP
\fBReturns:\fP
.RS 4
1 if part accept mouse events, 0 if not 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI void edje_edit_part_mouse_events_set (Evas_Object * obj, const char * part, unsigned char mouse_events)"
.PP
Set mouse_events for part. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fImouse_events\fP\fP
If set to 1 part will accept mouse events, 0 to ignore all mouse events from part. 
.SS "EAPI unsigned char edje_edit_part_name_set (Evas_Object * obj, const char * part, const char * new_name)"
.PP
Set a new name for part. 
.PP
Note that the relative getter function don't exist as it don't make sense ;)
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 on failure 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part to rename 
.TP
\fB\fInew_name\fP\fP
The new name for the part 
.SS "EAPI unsigned char edje_edit_part_repeat_events_get (Evas_Object * obj, const char * part)"
.PP
Get repeat_events for part. 
.PP
\fBReturns:\fP
.RS 4
1 if part will pass all events to the other parts, 0 if not 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI void edje_edit_part_repeat_events_set (Evas_Object * obj, const char * part, unsigned char repeat_events)"
.PP
Set repeat_events for part. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIrepeat_events\fP\fP
If set to 1 part will repeat all the received mouse events to other parts. If set to 0 the events received will not propagate to other parts. 
.SS "EAPI unsigned char edje_edit_part_restack_above (Evas_Object * obj, const char * part)"
.PP
Move the given part above the next one. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 on failure 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part to restack 
.SS "EAPI unsigned char edje_edit_part_restack_below (Evas_Object * obj, const char * part)"
.PP
Move the given part below the previous one. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 on failure 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part to restack 
.SS "EAPI const char* edje_edit_part_selected_state_get (Evas_Object * obj, const char * part)"
.PP
Get the current selected state in part. 
.PP
\fBReturns:\fP
.RS 4
The name of the selected state including the float value. Use \fBedje_edit_string_free()\fP when you don't need it anymore. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI unsigned char edje_edit_part_selected_state_set (Evas_Object * obj, const char * part, const char * state)"
.PP
Set the current state in part. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the state to set (including the float value) 
.SS "EAPI const char* edje_edit_part_source_get (Evas_Object * obj, const char * part)"
.PP
Get the source of part. 
.PP
Source is used in part of type EDJE_PART_TYPE_GROUP to specify the group to 'autoswallow' inside the given part.
.PP
\fBReturns:\fP
.RS 4
The name of the group to source the given part. Use \fBedje_edit_string_free()\fP when you don't need it anymore. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI unsigned char edje_edit_part_source_set (Evas_Object * obj, const char * part, const char * source)"
.PP
Set the source of part. 
.PP
Source is used in part of type EDJE_PART_TYPE_GROUP to specify the group to 'autoswallow' inside the given part. NOTE: This is not applied now. You must reload the edje to see the change.
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIsource\fP\fP
The name of the group to autoswallow in the given part 
.SS "EAPI Evas_List* edje_edit_part_states_list_get (Evas_Object * obj, const char * part)"
.PP
Get the list of all the states in the given part. 
.PP
\fBReturns:\fP
.RS 4
An Evas_List* of string (char *)containing all the states names found in part, including the float value (ex: 'default 0.00'). Use \fBedje_edit_string_list_free()\fP when you don't need it anymore. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI unsigned char edje_edit_part_type_get (Evas_Object * obj, const char * part)"
.PP
Get the type of a part. 
.PP
\fBReturns:\fP
.RS 4
One of: EDJE_PART_TYPE_NONE, EDJE_PART_TYPE_RECTANGLE, EDJE_PART_TYPE_TEXT,EDJE_PART_TYPE_IMAGE, EDJE_PART_TYPE_SWALLOW, EDJE_PART_TYPE_TEXTBLOCK,EDJE_PART_TYPE_GRADIENT or EDJE_PART_TYPE_GROUP 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.SS "EAPI Evas_List* edje_edit_parts_list_get (Evas_Object * obj)"
.PP
Get the list of all the parts in the given edje object. 
.PP
Use \fBedje_edit_string_list_free()\fP when you don't need it anymore.
.PP
\fBReturns:\fP
.RS 4
An Evas_List* of string (char *)containing all the part names. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI void edje_edit_print_internal_status (Evas_Object * obj)"
.PP
Print on standard output many information about the internal status of the edje object. 
.PP
This is probably only usefull to debug. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object to inspect 
.SS "EAPI int edje_edit_program_action_get (Evas_Object * obj, const char * prog)"
.PP
Get the action of a given program. 
.PP
Action can be one of EDJE_ACTION_TYPE_NONE, _STATE_SET, ACTION_STOP, SIGNAL_EMIT, DRAG_VAL_SET, _DRAG_VAL_STEP, _DRAG_VAL_PAGE, _SCRIPT
.PP
\fBReturns:\fP
.RS 4
The action type, or -1 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_action_set (Evas_Object * obj, const char * prog, int action)"
.PP
Set the action of a given program. 
.PP
Action can be one of EDJE_ACTION_TYPE_NONE, _STATE_SET, ACTION_STOP, SIGNAL_EMIT, DRAG_VAL_SET, _DRAG_VAL_STEP, _DRAG_VAL_PAGE, _SCRIPT
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIaction\fP\fP
The new action type 
.SS "EAPI unsigned char edje_edit_program_add (Evas_Object * obj, const char * name)"
.PP
Add a new program to the edje file If a program with the same name just exist the function will fail. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIname\fP\fP
The name of the new program 
.SS "EAPI unsigned char edje_edit_program_after_add (Evas_Object * obj, const char * prog, const char * after)"
.PP
Add a new program name to the list of 'afters' in the given program. 
.PP
All the programs listed in 'afters' will be executed after program execution.
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIafter\fP\fP
The name of another program to add to the afters list 
.SS "EAPI unsigned char edje_edit_program_afters_clear (Evas_Object * obj, const char * prog)"
.PP
Clear the 'afters' list of the given program. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI Evas_List* edje_edit_program_afters_get (Evas_Object * obj, const char * prog)"
.PP
Get the list of action that will be run after the give program Return a list of program name. 
.PP
Use \fBedje_edit_string_list_free()\fP when you don't need it anymore.
.PP
\fBReturns:\fP
.RS 4
An Evas_List of char*, or NULL on error 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_del (Evas_Object * obj, const char * prog)"
.PP
Remove the given program from the edje file. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The name of the program to remove 
.SS "EAPI unsigned char edje_edit_program_exist (Evas_Object * obj, const char * prog)"
.PP
Check if a program with the given name exist in the edje object. 
.PP
< 1 if the program exist, 0 otherwise. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The name of the program 
.SS "EAPI double edje_edit_program_in_from_get (Evas_Object * obj, const char * prog)"
.PP
Get in.from of a given program. 
.PP
\fBReturns:\fP
.RS 4
The delay 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_in_from_set (Evas_Object * obj, const char * prog, double seconds)"
.PP
Set in.from of a given program. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIseconds\fP\fP
Number of seconds to delay the program execution 
.SS "EAPI double edje_edit_program_in_range_get (Evas_Object * obj, const char * prog)"
.PP
Get in.range of a given program. 
.PP
\fBReturns:\fP
.RS 4
The delay random 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_in_range_set (Evas_Object * obj, const char * prog, double seconds)"
.PP
Set in.range of a given program. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIseconds\fP\fP
Max random number of seconds to delay 
.SS "EAPI unsigned char edje_edit_program_name_set (Evas_Object * obj, const char * prog, const char * new_name)"
.PP
Set a new name for the given program. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fInew_name\fP\fP
The new name to assign 
.SS "EAPI unsigned char edje_edit_program_run (Evas_Object * obj, const char * prog)"
.PP
Run the given program. 
.PP
< 1 on success, 0 otherwise. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The name of the program to execute 
.SS "EAPI const char* edje_edit_program_signal_get (Evas_Object * obj, const char * prog)"
.PP
Get signal of a given program. 
.PP
Remember to free the returned string using \fBedje_edit_string_free()\fP. 
.PP
\fBReturns:\fP
.RS 4
The signal value for prog 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_signal_set (Evas_Object * obj, const char * prog, const char * signal)"
.PP
Set signal of the given program. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIsignal\fP\fP
The new signal value 
.SS "EAPI const char* edje_edit_program_source_get (Evas_Object * obj, const char * prog)"
.PP
Get source of a given program. 
.PP
Remember to free the returned string using \fBedje_edit_string_free()\fP. 
.PP
\fBReturns:\fP
.RS 4
The source value for prog 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_source_set (Evas_Object * obj, const char * prog, const char * source)"
.PP
Set source of the given program. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIsource\fP\fP
The new source value 
.SS "EAPI const char* edje_edit_program_state2_get (Evas_Object * obj, const char * prog)"
.PP
Get the state2 for the given program In a STATE_SET action is not used In a SIGNAL_EMIT action is the source of the emitted signal. 
.PP
\fBReturns:\fP
.RS 4
The source to emit for prog 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_state2_set (Evas_Object * obj, const char * prog, const char * state2)"
.PP
Set the state2 for the given program In a STATE_SET action is not used In a SIGNAL_EMIT action is the source of the emitted signal. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIstate2\fP\fP
The state2 value to set 
.SS "EAPI const char* edje_edit_program_state_get (Evas_Object * obj, const char * prog)"
.PP
Get the state for the given program In a STATE_SET action this is the name of state to set. 
.PP
In a SIGNAL_EMIT action is the name of the signal to emit.
.PP
\fBReturns:\fP
.RS 4
The name of state for prog 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_state_set (Evas_Object * obj, const char * prog, const char * state)"
.PP
Set the state for the given program In a STATE_SET action this is the name of state to set. 
.PP
In a SIGNAL_EMIT action is the name of the signal to emit.
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIstate\fP\fP
The state to set (not including the state value) 
.SS "EAPI unsigned char edje_edit_program_target_add (Evas_Object * obj, const char * prog, const char * target)"
.PP
Add a new target name to the list of 'targets' in the given program. 
.PP
If program action is EDJE_ACTION_TYPE_ACTION_STOP then 'target' must be an existing program name. If action is EDJE_ACTION_TYPE_STATE_SET then 'target' must be an existing part name.
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fItarget\fP\fP
The name of another program or another part 
.SS "EAPI unsigned char edje_edit_program_targets_clear (Evas_Object * obj, const char * prog)"
.PP
Clear the 'targets' list of the given program. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI Evas_List* edje_edit_program_targets_get (Evas_Object * obj, const char * prog)"
.PP
Get the list of the targets for the given program Return a list of target name Use \fBedje_edit_string_list_free()\fP when you don't need it anymore. 
.PP
\fBReturns:\fP
.RS 4
An Evas_List of char*, or NULL on error 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI int edje_edit_program_transition_get (Evas_Object * obj, const char * prog)"
.PP
Get the type of transition to use when apply animations. 
.PP
Can be one of: EDJE_TWEEN_MODE_NONE, EDJE_TWEEN_MODE_LINEAR, EDJE_TWEEN_MODE_SINUSOIDAL, EDJE_TWEEN_MODE_ACCELERATE or EDJE_TWEEN_MODE_DECELERATE.
.PP
\fBReturns:\fP
.RS 4
The type of transition used by program 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_transition_set (Evas_Object * obj, const char * prog, int transition)"
.PP
Set the type of transition to use when apply animations. 
.PP
Can be one of: EDJE_TWEEN_MODE_NONE, EDJE_TWEEN_MODE_LINEAR, EDJE_TWEEN_MODE_SINUSOIDAL, EDJE_TWEEN_MODE_ACCELERATE or EDJE_TWEEN_MODE_DECELERATE.
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fItransition\fP\fP
The transition type to set 
.SS "EAPI double edje_edit_program_transition_time_get (Evas_Object * obj, const char * prog)"
.PP
Get the duration of the transition in seconds. 
.PP
\fBReturns:\fP
.RS 4
The duration of the transition 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_transition_time_set (Evas_Object * obj, const char * prog, double seconds)"
.PP
Set the duration of the transition in seconds. 
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIseconds\fP\fP
The duration of the transition (in seconds) 
.SS "EAPI double edje_edit_program_value2_get (Evas_Object * obj, const char * prog)"
.PP
Get the value of state2 for the given program. 
.PP
I don't know what this is used for. :P
.PP
\fBReturns:\fP
.RS 4
The value of state2 for prog 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_value2_set (Evas_Object * obj, const char * prog, double value)"
.PP
Set the value2 of state for the given program. 
.PP
This is used in DRAG_ACTION
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIvalue\fP\fP
The value to set 
.SS "EAPI double edje_edit_program_value_get (Evas_Object * obj, const char * prog)"
.PP
Get the value of state for the given program. 
.PP
In a STATE_SET action this is the value of state to set. Not used on SIGNAL_EMIT action.
.PP
\fBReturns:\fP
.RS 4
The value of state for prog 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.SS "EAPI unsigned char edje_edit_program_value_set (Evas_Object * obj, const char * prog, double value)"
.PP
Set the value of state for the given program. 
.PP
In a STATE_SET action this is the value of state to set. Not used on SIGNAL_EMIT action.
.PP
\fBReturns:\fP
.RS 4
1 on success or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIprog\fP\fP
The program name 
.TP
\fB\fIvalue\fP\fP
The value to set 
.SS "EAPI Evas_List* edje_edit_programs_list_get (Evas_Object * obj)"
.PP
Get the list of all the programs in the given edje object. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP The edje object 
.RE
.PP
\fBReturns:\fP
.RS 4
An Evas_List* of string (char *)containing all the program names. Use \fBedje_edit_string_list_free()\fP when you don't need it anymore.
.PP
A string list containing all the program names 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI int edje_edit_save (Evas_Object * obj)"
.PP
Save the modified edje object back to his file. 
.PP
Use this function when you are done with your editing, all the change made to the current loaded group will be saved back to the original file.
.PP
NOTE: for now this as 2 limitations -the saved edje file cannot be decompiled anymore -you will lost your define in the edc source
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 on failure 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object to save 
.SS "EAPI unsigned char edje_edit_spectra_add (Evas_Object * obj, const char * name)"
.PP
Add a new spectra in the given edje object. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIname\fP\fP
The name of the new spectra 
.SS "EAPI unsigned char edje_edit_spectra_del (Evas_Object * obj, const char * spectra)"
.PP
Delete the given spectra from the edje object. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIspectra\fP\fP
The name of the spectra to delete 
.SS "EAPI unsigned char edje_edit_spectra_name_set (Evas_Object * obj, const char * spectra, const char * name)"
.PP
Change the name of the given spectra. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIspectra\fP\fP
The current name of the spectra 
.TP
\fB\fIname\fP\fP
The new name to assign 
.SS "EAPI unsigned char edje_edit_spectra_stop_color_get (Evas_Object * obj, const char * spectra, int stop_number, int * r, int * g, int * b, int * a, int * d)"
.PP
Get the colors of the given stop. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIspectra\fP\fP
The name of the spectra 
.TP
\fB\fIstop_number\fP\fP
The number of the stop 
.TP
\fB\fIr\fP\fP
Where to store the red color value 
.TP
\fB\fIg\fP\fP
Where to store the green color value 
.TP
\fB\fIb\fP\fP
Where to store the blue color value 
.TP
\fB\fIa\fP\fP
Where to store the alpha color value 
.TP
\fB\fId\fP\fP
Where to store the delta stop value 
.SS "EAPI unsigned char edje_edit_spectra_stop_color_set (Evas_Object * obj, const char * spectra, int stop_number, int r, int g, int b, int a, int d)"
.PP
Set the colors of the given stop. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIspectra\fP\fP
The name of the spectra 
.TP
\fB\fIstop_number\fP\fP
The number of the stop 
.TP
\fB\fIr\fP\fP
The red color value to set 
.TP
\fB\fIg\fP\fP
The green color value to set 
.TP
\fB\fIb\fP\fP
The blue color value to set 
.TP
\fB\fIa\fP\fP
The alpha color value to set 
.TP
\fB\fId\fP\fP
The delta stop value to set 
.SS "EAPI int edje_edit_spectra_stop_num_get (Evas_Object * obj, const char * spectra)"
.PP
Get the number of stops in the given spectra. 
.PP
\fBReturns:\fP
.RS 4
The number of stops, or 0 on errors 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIspectra\fP\fP
The name of the spectra 
.SS "EAPI unsigned char edje_edit_spectra_stop_num_set (Evas_Object * obj, const char * spectra, int num)"
.PP
Set the number of stops in the given spectra. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIspectra\fP\fP
The name of the spectra 
.TP
\fB\fInum\fP\fP
The number of stops you want 
.SS "EAPI Evas_List* edje_edit_spectrum_list_get (Evas_Object * obj)"
.PP
Get the list of all the spectrum in the given edje object. 
.PP
Use \fBedje_edit_string_list_free()\fP when you don't need it anymore.
.PP
\fBReturns:\fP
.RS 4
An Evas_List* of string(char *) containing all the spectra names. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.SS "EAPI void edje_edit_state_add (Evas_Object * obj, const char * part, const char * name)"
.PP
Create a new state to the give part. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIname\fP\fP
The name for the new state (not including the state value) 
.SS "EAPI double edje_edit_state_align_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the align_x value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The horizontal align value for the given state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_align_x_set (Evas_Object * obj, const char * part, const char * state, double align)"
.PP
Set the align_x value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIalign\fP\fP
The new horizontal align to set 
.SS "EAPI double edje_edit_state_align_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the align_y value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The vertical align value for the given state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_align_y_set (Evas_Object * obj, const char * part, const char * state, double align)"
.PP
Set the align_y value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIalign\fP\fP
The new vertical align to set 
.SS "EAPI double edje_edit_state_aspect_max_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the maximum aspect value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The aspect maximum value of a part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_aspect_max_set (Evas_Object * obj, const char * part, const char * state, double aspect)"
.PP
Set the maximum aspect value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIaspect\fP\fP
The new maximum aspect value to set 
.SS "EAPI double edje_edit_state_aspect_min_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the minimum aspect value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The aspect minimum value of a part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_aspect_min_set (Evas_Object * obj, const char * part, const char * state, double aspect)"
.PP
Set the minimum aspect value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIaspect\fP\fP
The new minimum aspect value to set 
.SS "EAPI unsigned char edje_edit_state_aspect_pref_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the aspect preference value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The aspect preference (0=none, 1=vertical, 2=horizontal, 3=both) 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_aspect_pref_set (Evas_Object * obj, const char * part, const char * state, unsigned char pref)"
.PP
Set the aspect preference value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIpref\fP\fP
The new aspect preference to set (0=none, 1=vertical, 2=horizontal, 3=both) 
.SS "EAPI void edje_edit_state_color2_get (Evas_Object * obj, const char * part, const char * state, int * r, int * g, int * b, int * a)"
.PP
Get the color2 of a part state. 
.PP
Pass NULL to any of [r,g,b,a] to get only the others. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIr\fP\fP
A pointer to store the red value 
.TP
\fB\fIg\fP\fP
A pointer to store the green value 
.TP
\fB\fIb\fP\fP
A pointer to store the blue value 
.TP
\fB\fIa\fP\fP
A pointer to store the alpha value 
.SS "EAPI void edje_edit_state_color2_set (Evas_Object * obj, const char * part, const char * state, int r, int g, int b, int a)"
.PP
Set the color2 of a part state. 
.PP
Pass -1 to any of [r,g,b,a] to leave the value untouched. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIr\fP\fP
The red value of the color 
.TP
\fB\fIg\fP\fP
The green value of the color 
.TP
\fB\fIb\fP\fP
The blue value of the color 
.TP
\fB\fIa\fP\fP
The alpha value of the color 
.SS "EAPI void edje_edit_state_color3_get (Evas_Object * obj, const char * part, const char * state, int * r, int * g, int * b, int * a)"
.PP
Get the color3 of a part state. 
.PP
Pass NULL to any of [r,g,b,a] to get only the others. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIr\fP\fP
A pointer to store the red value 
.TP
\fB\fIg\fP\fP
A pointer to store the green value 
.TP
\fB\fIb\fP\fP
A pointer to store the blue value 
.TP
\fB\fIa\fP\fP
A pointer to store the alpha value 
.SS "EAPI void edje_edit_state_color3_set (Evas_Object * obj, const char * part, const char * state, int r, int g, int b, int a)"
.PP
Set the color3 of a part state. 
.PP
Pass -1 to any of [r,g,b,a] to leave the value untouched. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIr\fP\fP
The red value of the color 
.TP
\fB\fIg\fP\fP
The green value of the color 
.TP
\fB\fIb\fP\fP
The blue value of the color 
.TP
\fB\fIa\fP\fP
The alpha value of the color 
.SS "EAPI void edje_edit_state_color_get (Evas_Object * obj, const char * part, const char * state, int * r, int * g, int * b, int * a)"
.PP
Get the color of a part state. 
.PP
Pass NULL to any of [r,g,b,a] to get only the others. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIr\fP\fP
A pointer to store the red value 
.TP
\fB\fIg\fP\fP
A pointer to store the green value 
.TP
\fB\fIb\fP\fP
A pointer to store the blue value 
.TP
\fB\fIa\fP\fP
A pointer to store the alpha value 
.SS "EAPI void edje_edit_state_color_set (Evas_Object * obj, const char * part, const char * state, int r, int g, int b, int a)"
.PP
Set the color of a part state. 
.PP
Pass -1 to any of [r,g,b,a] to leave the value untouched. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIr\fP\fP
The red value of the color 
.TP
\fB\fIg\fP\fP
The green value of the color 
.TP
\fB\fIb\fP\fP
The blue value of the color 
.TP
\fB\fIa\fP\fP
The alpha value of the color 
.SS "EAPI void edje_edit_state_del (Evas_Object * obj, const char * part, const char * state)"
.PP
Delete the given part state from the edje. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part that contain state 
.TP
\fB\fIstate\fP\fP
The current name of the state (including the state value) 
.SS "EAPI unsigned char edje_edit_state_exist (Evas_Object * obj, const char * part, const char * state)"
.PP
Check if a part state with the given name exist. 
.PP
< 1 if the part state exist, 0 otherwise. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the state to check (including the state value) 
.SS "EAPI int edje_edit_state_fill_origin_offset_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the fill origin offset x value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The fill origin offset x relative to area 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_fill_origin_offset_x_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Set the fill origin offset x value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new value to set 
.SS "EAPI int edje_edit_state_fill_origin_offset_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the fill origin offset y value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The fill origin offset y relative to area 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_fill_origin_offset_y_set (Evas_Object * obj, const char * part, const char * state, double y)"
.PP
Set the fill origin offset x value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIy\fP\fP
The new value to set 
.SS "EAPI double edje_edit_state_fill_origin_relative_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the fill origin relative x value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The fill offset x relative to area 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_fill_origin_relative_x_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Set the fill origin relative x value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new value to set 
.SS "EAPI double edje_edit_state_fill_origin_relative_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the fill origin relative y value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The fill origin y relative to area 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_fill_origin_relative_y_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Set the fill origin relative y value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new value to set 
.SS "EAPI int edje_edit_state_fill_size_offset_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the fill size offset x value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The fill size offset x relative to area 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_fill_size_offset_x_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Set the fill size offset x value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new value to set 
.SS "EAPI int edje_edit_state_fill_size_offset_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the fill size offset y value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The fill size offset y relative to area 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_fill_size_offset_y_set (Evas_Object * obj, const char * part, const char * state, double y)"
.PP
Set the fill size offset x value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIy\fP\fP
The new value to set 
.SS "EAPI double edje_edit_state_fill_size_relative_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the fill size relative x value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The fill size offset x relative to area 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_fill_size_relative_x_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Set the fill size relative x value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new value to set 
.SS "EAPI double edje_edit_state_fill_size_relative_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the fill size relative y value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The fill size y relative to area 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_fill_size_relative_y_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Set the fill size relative y value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new value to set 
.SS "EAPI const char* edje_edit_state_font_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get font name for a given part state. 
.PP
Remember to free the returned string using \fBedje_edit_string_free()\fP. 
.PP
\fBReturns:\fP
.RS 4
The name of the font used in the given part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_font_set (Evas_Object * obj, const char * part, const char * state, const char * font)"
.PP
Set font name for a given part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIfont\fP\fP
The name of the font to use in the given part state 
.SS "EAPI int edje_edit_state_gradient_rel1_offset_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the gradien rel1 offset x value. 
.PP
\fBReturns:\fP
.RS 4
The gradient rel1 offset x value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_rel1_offset_x_set (Evas_Object * obj, const char * part, const char * state, int val)"
.PP
Set the gradien rel1 offset x value. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI int edje_edit_state_gradient_rel1_offset_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the gradien rel1 offset y value. 
.PP
\fBReturns:\fP
.RS 4
The gradient rel1 offset y value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_rel1_offset_y_set (Evas_Object * obj, const char * part, const char * state, int val)"
.PP
Set the gradien rel1 offset y value. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI double edje_edit_state_gradient_rel1_relative_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the gradien rel1 relative x value. 
.PP
\fBReturns:\fP
.RS 4
The gradien rel1 relative x value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_rel1_relative_x_set (Evas_Object * obj, const char * part, const char * state, double val)"
.PP
Set the gradien rel1 relative x value. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI double edje_edit_state_gradient_rel1_relative_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the gradien rel1 relative y value. 
.PP
\fBReturns:\fP
.RS 4
The gradien rel1 relative y value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_rel1_relative_y_set (Evas_Object * obj, const char * part, const char * state, double val)"
.PP
Set the gradien rel1 relative y value. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI int edje_edit_state_gradient_rel2_offset_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the gradien rel2 offset x value. 
.PP
\fBReturns:\fP
.RS 4
The gradient rel2 offset x value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_rel2_offset_x_set (Evas_Object * obj, const char * part, const char * state, int val)"
.PP
Set the gradien rel2 offset x value. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI int edje_edit_state_gradient_rel2_offset_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the gradien rel2 offset y value. 
.PP
\fBReturns:\fP
.RS 4
The gradient rel2 offset y value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_rel2_offset_y_set (Evas_Object * obj, const char * part, const char * state, int val)"
.PP
Set the gradien rel2 offset y value. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI double edje_edit_state_gradient_rel2_relative_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the gradien rel2 relative x value. 
.PP
\fBReturns:\fP
.RS 4
The gradien rel2 relative x value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_rel2_relative_x_set (Evas_Object * obj, const char * part, const char * state, double val)"
.PP
Set the gradien rel2 relative x value. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI double edje_edit_state_gradient_rel2_relative_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the gradien rel2 relative y value. 
.PP
\fBReturns:\fP
.RS 4
The gradien rel2 relative y value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_rel2_relative_y_set (Evas_Object * obj, const char * part, const char * state, double val)"
.PP
Set the gradien rel2 relative y value. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI const char* edje_edit_state_gradient_spectra_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the spectra used by part state. 
.PP
Remember to free the string with \fBedje_edit_string_free()\fP 
.PP
\fBReturns:\fP
.RS 4
The spectra name used in state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_spectra_set (Evas_Object * obj, const char * part, const char * state, const char * spectra)"
.PP
Set the spectra used by part state. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIspectra\fP\fP
The spectra name to assign 
.SS "EAPI const char* edje_edit_state_gradient_type_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the type of gradient. 
.PP
Remember to free the string with \fBedje_edit_string_free()\fP. 
.PP
\fBReturns:\fP
.RS 4
The type of gradient used in state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_gradient_type_set (Evas_Object * obj, const char * part, const char * state, const char * type)"
.PP
Set the type of gradient. 
.PP
Gradient type can be on of the following: linear, linear.diag, linear.codiag, radial, rectangular, angular, sinusoidal
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fItype\fP\fP
The type of gradient to use 
.SS "EAPI unsigned char edje_edit_state_gradient_use_fill_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get if the current gradient use the fill properties or the gradient_rel as params. 
.PP
\fBReturns:\fP
.RS 4
1 if use fill, 0 if use gradient_rel 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_image_border_get (Evas_Object * obj, const char * part, const char * state, int * l, int * r, int * t, int * b)"
.PP
Get the image border of a part state. 
.PP
Pass NULL to any of [r,g,b,a] to get only the others. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIl\fP\fP
A pointer to store the left value 
.TP
\fB\fIr\fP\fP
A pointer to store the right value 
.TP
\fB\fIt\fP\fP
A pointer to store the top value 
.TP
\fB\fIb\fP\fP
A pointer to store the bottom value 
.SS "EAPI void edje_edit_state_image_border_set (Evas_Object * obj, const char * part, const char * state, int l, int r, int t, int b)"
.PP
Set the image border of a part state. 
.PP
Pass -1 to any of [l,r,t,b] to leave the value untouched. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIl\fP\fP
The new left border (or -1) 
.TP
\fB\fIr\fP\fP
The new right border (or -1) 
.TP
\fB\fIt\fP\fP
The new top border (or -1) 
.TP
\fB\fIb\fP\fP
The new bottom border (or -1) 
.SS "EAPI const char* edje_edit_state_image_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get normal image name for a given part state. 
.PP
Remember to free the returned string using \fBedje_edit_string_free()\fP. 
.PP
\fBReturns:\fP
.RS 4
The name of the image used by state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_image_set (Evas_Object * obj, const char * part, const char * state, const char * image)"
.PP
Set normal image for a given part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIimage\fP\fP
The name of the image for the given state (must be an image contained in the edje file) 
.SS "EAPI int edje_edit_state_max_h_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the max_h value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The maximum height of a part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_max_h_set (Evas_Object * obj, const char * part, const char * state, int max_h)"
.PP
Set the max_h value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fImax_h\fP\fP
The new maximum height to set for the part state 
.SS "EAPI int edje_edit_state_max_w_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the max_w value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The maximum width of a part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_max_w_set (Evas_Object * obj, const char * part, const char * state, int max_w)"
.PP
Set the max_w value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fImax_w\fP\fP
The new maximum width to set for the part state 
.SS "EAPI int edje_edit_state_min_h_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the min_h value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The minimum height of a part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_min_h_set (Evas_Object * obj, const char * part, const char * state, int min_h)"
.PP
Set the min_h value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fImin_h\fP\fP
The new minimum height to set for the part state 
.SS "EAPI int edje_edit_state_min_w_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the min_w value of a part state. 
.PP
\fBReturns:\fP
.RS 4
The minimum width of a part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_min_w_set (Evas_Object * obj, const char * part, const char * state, int min_w)"
.PP
Set the min_w value of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fImin_w\fP\fP
The new minimum width to set for the part state 
.SS "EAPI int edje_edit_state_name_set (Evas_Object * obj, const char * part, const char * state, const char * new_name)"
.PP
Set a new name for the given state in the given part. 
.PP
Note that state and new_name must include the floating value inside the string (ex. 'default 0.00') 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part that contain state 
.TP
\fB\fIstate\fP\fP
The current name of the state 
.TP
\fB\fInew_name\fP\fP
The new name to assign (including the value) 
.SS "EAPI int edje_edit_state_rel1_offset_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the rel1 offset x value of state. 
.PP
\fBReturns:\fP
.RS 4
The 'rel1 offset X' value of the part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel1_offset_x_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Set the rel1 offset x value of state. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new 'rel1 offset X' value to set 
.SS "EAPI int edje_edit_state_rel1_offset_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the rel1 offset y value of state. 
.PP
\fBReturns:\fP
.RS 4
The 'rel1 offset Y' value of the part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel1_offset_y_set (Evas_Object * obj, const char * part, const char * state, double y)"
.PP
Get the rel1 offset y value of state. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIy\fP\fP
The new 'rel1 offset Y' value to set 
.SS "EAPI double edje_edit_state_rel1_relative_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the rel1 relative x value of state. 
.PP
\fBReturns:\fP
.RS 4
The 'rel1 relative X' value of the part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the part state (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel1_relative_x_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Set the rel1 relative x value of state. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new 'rel1 relative X' value to set 
.SS "EAPI double edje_edit_state_rel1_relative_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the rel1 relative y value of state. 
.PP
\fBReturns:\fP
.RS 4
The 'rel1 relative Y' value of the part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel1_relative_y_set (Evas_Object * obj, const char * part, const char * state, double y)"
.PP
Set the rel1 relative y value of state. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIy\fP\fP
The new 'rel1 relative Y' value to set 
.SS "EAPI const char* edje_edit_state_rel1_to_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the part name rel1x is relative to. 
.PP
The function return NULL if the part is relative to the whole interface. 
.PP
\fBReturns:\fP
.RS 4
The name of the part to apply the relativity 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel1_to_x_set (Evas_Object * obj, const char * part, const char * state, const char * rel_to)"
.PP
Set the part rel1x is relative to. 
.PP
Set rel_to to NULL make the part relative to the whole interface. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIrel_to\fP\fP
The name of the part that is used as container/parent 
.SS "EAPI const char* edje_edit_state_rel1_to_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the part name rel1y is relative to. 
.PP
The function return NULL if the part is relative to the whole interface. 
.PP
\fBReturns:\fP
.RS 4
The name of the part to apply the relativity 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel1_to_y_set (Evas_Object * obj, const char * part, const char * state, const char * rel_to)"
.PP
Set the part rel1y is relative to. 
.PP
Set rel_to to NULL make the part relative to the whole interface. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIrel_to\fP\fP
The name of the part that is used as container/parent 
.SS "EAPI int edje_edit_state_rel2_offset_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the rel2 offset x value of state. 
.PP
\fBReturns:\fP
.RS 4
The 'rel2 offset X' value of the part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel2_offset_x_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Get the rel2 offset x value of state. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new 'rel2 offset X' value to set 
.SS "EAPI int edje_edit_state_rel2_offset_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the rel2 offset y value of state. 
.PP
\fBReturns:\fP
.RS 4
The 'rel2 offset Y' value of the part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel2_offset_y_set (Evas_Object * obj, const char * part, const char * state, double y)"
.PP
Get the rel2 offset y value of state. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIy\fP\fP
The new 'rel2 offset Y' value to set 
.SS "EAPI double edje_edit_state_rel2_relative_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the rel2 relative x value of state. 
.PP
\fBReturns:\fP
.RS 4
The 'rel2 relative X' value of the part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel2_relative_x_set (Evas_Object * obj, const char * part, const char * state, double x)"
.PP
Set the rel2 relative x value of state. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIx\fP\fP
The new 'rel2 relative X' value to set 
.SS "EAPI double edje_edit_state_rel2_relative_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the rel2 relative y value of state. 
.PP
\fBReturns:\fP
.RS 4
The 'rel2 relative Y' value of the part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel2_relative_y_set (Evas_Object * obj, const char * part, const char * state, double y)"
.PP
Set the rel2 relative y value of state. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIy\fP\fP
The new 'rel2 relative Y' value to set 
.SS "EAPI const char* edje_edit_state_rel2_to_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the part name rel2x is relative to. 
.PP
The function return NULL if the part is relative to the whole interface. 
.PP
\fBReturns:\fP
.RS 4
The name of the part to apply the relativity 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel2_to_x_set (Evas_Object * obj, const char * part, const char * state, const char * rel_to)"
.PP
Set the part rel2x is relative to. 
.PP
Set rel_to to NULL make the part relative to the whole interface. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIrel_to\fP\fP
The name of the part that is used as container/parent 
.SS "EAPI const char* edje_edit_state_rel2_to_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the part name rel2y is relative to. 
.PP
The function return NULL if the part is relative to the whole interface. 
.PP
\fBReturns:\fP
.RS 4
The name of the part to apply the relativity 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_rel2_to_y_set (Evas_Object * obj, const char * part, const char * state, const char * rel_to)"
.PP
Set the part rel2y is relative to. 
.PP
Set rel_to to NULL make the part relative to the whole interface. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIrel_to\fP\fP
The name of the part that is used as container/parent 
.SS "EAPI double edje_edit_state_text_align_x_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the text horizontal align of a part state. 
.PP
The value range is from 0.0(right) to 1.0(left) 
.PP
\fBReturns:\fP
.RS 4
The text align X value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_text_align_x_set (Evas_Object * obj, const char * part, const char * state, double align)"
.PP
Set the text horizontal align of a part state. 
.PP
The value range is from 0.0(right) to 1.0(left) 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIalign\fP\fP
The new text align X value 
.SS "EAPI double edje_edit_state_text_align_y_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the text vertical align of a part state. 
.PP
The value range is from 0.0(top) to 1.0(bottom) 
.PP
\fBReturns:\fP
.RS 4
The text align Y value 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_text_align_y_set (Evas_Object * obj, const char * part, const char * state, double align)"
.PP
Set the text vertical align of a part state. 
.PP
The value range is from 0.0(top) to 1.0(bottom) 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIalign\fP\fP
The new text align Y value 
.SS "EAPI const char* edje_edit_state_text_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the text of a part state. 
.PP
Remember to free the returned string with \fBedje_edit_string_free()\fP. 
.PP
\fBReturns:\fP
.RS 4
A newly allocated string containing the text for the given state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_text_set (Evas_Object * obj, const char * part, const char * state, const char * text)"
.PP
Set the text of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fItext\fP\fP
The new text to assign 
.SS "EAPI int edje_edit_state_text_size_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the text size of a part state. 
.PP
The function will return -1 on errors. 
.PP
\fBReturns:\fP
.RS 4
The font size in pixel or -1 on errors. 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_text_size_set (Evas_Object * obj, const char * part, const char * state, int size)"
.PP
Set the text size of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIsize\fP\fP
The new font size to set (in pixel) 
.SS "EAPI unsigned char edje_edit_state_tween_add (Evas_Object * obj, const char * part, const char * state, const char * tween)"
.PP
Add a new tween frame to the given part state The tween param must be the name of an existing image. 
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fItween\fP\fP
The name of the image to add. 
.SS "EAPI unsigned char edje_edit_state_tween_del (Evas_Object * obj, const char * part, const char * state, const char * tween)"
.PP
Remove the first tween with the given name. 
.PP
If none is removed the function return 0. The image is not removed from the edje.
.PP
\fBReturns:\fP
.RS 4
1 on success, 0 otherwise 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fItween\fP\fP
The name of the image to remove from the tween list. 
.SS "EAPI Evas_List* edje_edit_state_tweens_list_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the list of all the tweens images in the given part state. 
.PP
Use \fBedje_edit_string_list_free()\fP when you don't need it anymore.
.PP
\fBReturns:\fP
.RS 4
A string list containing all the image name that form a tween animation in the given part state 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI unsigned char edje_edit_state_visible_get (Evas_Object * obj, const char * part, const char * state)"
.PP
Get the visibility of a part state. 
.PP
\fBReturns:\fP
.RS 4
TRUE if the state is visible 
.RE
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.SS "EAPI void edje_edit_state_visible_set (Evas_Object * obj, const char * part, const char * state, unsigned char visible)"
.PP
Set the visibility of a part state. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIobj\fP\fP
The edje object 
.TP
\fB\fIpart\fP\fP
The name of the part 
.TP
\fB\fIstate\fP\fP
The name of the 'part state' (ex. 'default 0.00') 
.TP
\fB\fIvisible\fP\fP
TRUE to set the state visible 
.SS "EAPI void edje_edit_string_free (const char * str)"
.PP
Free a generic string (char *) allocated by an edje_edit_*_get() function. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIstr\fP\fP
The string to free. 
.SS "EAPI void edje_edit_string_list_free (Evas_List * lst)"
.PP
Free a generic Evas_List of (char *) allocated by an edje_edit_*_get() function. 
.PP

.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIlst\fP\fP
The list to free. Will also free all the strings. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Edje from the source code.
